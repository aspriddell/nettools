@page "/traceroute"
@using global::Geolocation
@using NetTools.Models

<div class="d-flex flex-column gap-2">
    @if (GeolocationService.MixedHttpPotentiallyBlocked)
    {
        <MixedHttpRequestAlert/>
    }
    else
    {
        <FileSubmissionComponent TItem="TracerouteResult"
                                 TOut="ILookup<string, TracerouteRouteGroup>"
                                 @bind-Current="HostTraces"
                                 ProcessItems="i => ProcessRoutes(i).ToLookup(x => x.Destination)"/>

        @if (HostTraces?.Any() == true)
        {
            // custom dropdown as HxSelect doesn't like how we do it...
            <div class="d-flex gap-4 align-items-center flex-wrap">
                <select class="form-select" style="width: unset" @onchange="i => SetHost(i.Value?.ToString())">
                    @foreach (var host in HostTraces)
                    {
                        <option value="@host.Key" selected="@(host.Key == SelectedHost)">@host.Key</option>
                    }
                </select>

                <select class="form-select" style="width: unset" @onchange="i => SetTrace(HostTraces[SelectedHost].Single(x => x.Id == int.Parse(i.Value.ToString())))">
                    @foreach (var trace in HostTraces[SelectedHost].OrderBy(x => x.Id))
                    {
                        <option value="@trace.Id" selected="@(trace.Id == SelectedTrace?.Id)">Route @trace.Id.ToString()</option>
                    }
                </select>
            </div>
        }
    }

    <hr/>
    <div id="map" class="map-container"></div>

    @* spacing *@
    <div></div>

    @if (SelectedTrace != null)
    {
        <table class="table">
            <thead>
            <tr>
                <th scope="col">Hop #</th>
                <th scope="col">Country</th>
                <th scope="col">IP Address</th>
                <th scope="col">Hostname</th>
                <th scope="col">ISP/AS</th>
                <th scope="col">Organisation</th>
                <th scope="col">RTT (ms)</th>
                <th scope="col">Hop Distance</th>
            </tr>
            </thead>
            <tbody>
            @{
                var i = 1;
                Coordinate? lastCoordinate = null;
                double? totalDistanceServiced = null;

                foreach (var hop in SelectedTrace.Hops)
                {
                    var ipInfo = hop != null ? HostGeolocationCache.GetValueOrDefault(hop.IP) : null;

                    // hop was unreachable, display as unknown
                    if (hop == null)
                    {
                        <tr>
                            <th scope="row">
                                <div class="d-flex align-items-center gap-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" disabled>
                                    </div>
                                    <span>@(i++)</span>
                                </div>
                            </th>
                            <td>
                                <img alt="unknown country" src="https://cdn.jsdelivr.net/gh/ppy/osu-resources@2024.410.0/osu.Game.Resources/Textures/Flags/__.png" height="20"/>
                            </td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                        </tr>
                    }
                    else if (ipInfo == null)
                    {
                        <tr>
                            <th scope="row">
                                <div class="d-flex align-items-center gap-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" disabled>
                                    </div>
                                    <span>@(i++)</span>
                                </div>
                            </th>
                            <td>
                                <div class="d-flex align-items-center gap-3">
                                    <img alt="country flag" src="https://cdn.jsdelivr.net/gh/ppy/osu-resources@2024.410.0/osu.Game.Resources/Textures/Flags/__.png" height="20"/>
                                </div>
                            </td>
                            <td>@hop.IP.ToString()</td>
                            <td><code>@hop.Name</code></td>
                            <td>-</td>
                            <td>-</td>
                            <td>@hop.RoundtripTimeMs.ToString("f3")</td>
                            <td>-</td>
                        </tr>
                    }
                    else
                    {
                        var coordinate = new Coordinate(ipInfo.Latitude!.Value, ipInfo.Longitude!.Value);
                        var distanceMiles = lastCoordinate.HasValue ? GeoCalculator.GetDistance(lastCoordinate.Value, coordinate) : 0;

                        <tr>
                            <th scope="row">
                                <div class="d-flex align-items-center gap-2">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@(!IgnoredHops.Contains(hop.IP))" @onchange="() => ToggleHostVisibility(hop.IP)">
                                    </div>
                                    <span>@(i++)</span>
                                </div>
                            </th>
                            <td>
                                <div class="d-flex align-items-center gap-3">
                                    <img alt="country flag" src=@($"https://cdn.jsdelivr.net/gh/ppy/osu-resources@2024.410.0/osu.Game.Resources/Textures/Flags/{ipInfo?.CountryCode?.ToUpperInvariant() ?? "__"}.png") height="20"/>
                                    @if (!string.IsNullOrEmpty(ipInfo.City))
                                    {
                                        <span>@ipInfo.City, @ipInfo.CountryCode</span>
                                    }
                                    else if (!string.IsNullOrEmpty(ipInfo.Country))
                                    {
                                        <span>@ipInfo.Country</span>
                                    }
                                </div>
                            </td>
                            <td>@hop.IP.ToString()</td>
                            <td><code>@hop.Name</code></td>
                            <td>@ipInfo.AsName</td>
                            <td>@ipInfo.Organisation</td>
                            <td>@hop.RoundtripTimeMs.ToString("f3")</td>
                            @if (IgnoredHops.Contains(hop.IP))
                            {
                                <td>-</td>
                            }
                            else
                            {
                                <td>@distanceMiles miles</td>

                                // update coordinate
                                lastCoordinate = coordinate;
                                totalDistanceServiced = totalDistanceServiced.HasValue ? totalDistanceServiced + distanceMiles : distanceMiles;
                            }
                        </tr>
                    }
                }

                // summary row
                <tr>
                    <td></td>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>@SelectedTrace.Hops.Last(x => x != null).RoundtripTimeMs.ToString("f3") ms</th>
                    <th>@totalDistanceServiced?.ToString("N3") miles</th>
                </tr>
            }
            </tbody>
        </table>
    }
</div>